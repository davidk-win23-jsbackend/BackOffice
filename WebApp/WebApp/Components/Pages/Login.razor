@page "/signin"

@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Sign in</PageTitle>

<section class="signin">
    <div class="container">

        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert alert-danger">
                @StatusMessage
            </div>
        }
        <EditForm Model="SignInForm" OnValidSubmit="OnValidSubmit" FormName="signin" novalidate>
            <DataAnnotationsValidator />
            <h1>Welcome back</h1>
            <p>Don't have an account yet? <a href="/signup">Sign up here</a></p>

            <div class="form-content">
                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <InputText type="email" @bind-Value="SignInForm.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter your email" />
                    <ValidationMessage For="() => SignInForm.Email" />
                </div>
                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="SignInForm.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter your password" />
                    <ValidationMessage For="() => SignInForm.Password" />
                </div>
            </div>
            <div id="form-checkbox" class="checkbox-group">
                <div class="input-group">
                    <InputCheckbox @bind-Value="SignInForm.RememberMe" class="form-control" />
                    <label>Remember me</label>
                </div>
            </div>
            <div id="form-button">
                <button type="submit" class="btn btn-theme"><i class="fa-regular fa-arrow-right-to-bracket"></i>Sign in</button>
            </div>
        </EditForm>

    </div>
</section>

@code {
    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private SignInFormModel SignInForm { get; set; } = new();

    private bool isRendered;
    private string? authToken;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!string.IsNullOrEmpty(authToken))
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", authToken);
            authToken = null; // Clear the token after it's been stored
        }
    }

    public async Task OnValidSubmit(EditContext editContext)
    {
        var loginRequest = new UserLoginRequest
            {
                Email = SignInForm.Email,
                Password = SignInForm.Password,
                IsPersistent = SignInForm.RememberMe
            };

        var result = await HttpClient.PostAsJsonAsync("http://localhost:7110/api/SignIn", loginRequest);

        if (!result.IsSuccessStatusCode)
        {
            StatusMessage = "Unable to sign in. Please try again.";
            return;
        }

        var responseContent = await result.Content.ReadAsStringAsync();
        authToken = JsonDocument.Parse(responseContent).RootElement.GetProperty("token").GetString();

        StatusMessage = "Sign in successful!";
        NavigationManager.NavigateTo(ReturnUrl ?? "/");

        // Trigger a re-render to call OnAfterRenderAsync
        StateHasChanged();
    }

    private class SignInFormModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    public class UserLoginRequest
    {
        public string Email { get; set; } = null!;
        public string Password { get; set; } = null!;
        public bool IsPersistent { get; set; }
    }
}
